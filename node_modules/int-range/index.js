const $rangeList = Symbol('rangeList');
const $param2RnageList = Symbol('param2RnageList');


class RangeGroup {
    
    constructor(param){
        this[$rangeList] = [];
        this.add(param);
    }
    
    toArray() {
        let arr = [];
        this[$rangeList].map((v)=>{
            arr.push(v.toArray());
        });
        return arr;
    }

    /**
     * 范围相加，存在交集的Range会合并
     * @param {{}} param
     */
    add(param) {
        // 获得等待相加的Range列表
        const newList = this[$param2RnageList](param);
        // 旧的Range列表
        const oldList = this[$rangeList];

        while (newList.length > 0) {
            // newRange与oldList的每个元素都进行合成
            const newRange = newList.shift();
            const intersectRange = [];
            for (let i = oldList.length-1; i >= 0; i--) {
                const oldRange = oldList[i];
                if(newRange.isIntersect(oldRange)){
                    intersectRange.push(oldRange);
                    oldList.splice(i,1);
                }
            }

            intersectRange.map((v)=>{
                newRange.min = Math.min(newRange.min, v.min);
                newRange.max = Math.max(newRange.max, v.max);
            });

            oldList.push(newRange);
        }
        // 从小到大排序
        oldList.sort((a,b)=>{
            return a.min - b.min;
        });
    }

    /**
     * 范围相减，交集会被删除
     * @param param
     */
    sub(param) {
        // 获得等待相减的Range列表
        const newList = this[$param2RnageList](param);
        // 旧的Range列表
        const oldList = this[$rangeList];

        while (newList.length > 0) {
            const newRange = newList.shift();
            const newArr = newRange.toArray();
            for (let i = oldList.length-1; i >= 0; i--) {
                const oldRange = oldList[i];
                const oldArr = oldRange.toArray();
                newArr.map((v)=>{
                    const index = oldArr.indexOf(v);
                    if(index != -1){
                        oldArr.splice(index,1);
                    }
                });

                // 发生了改变
                if(oldRange.length > oldArr.length){
                    oldList.splice(i,1);

                    if(oldArr.length > 0){
                        this.add(oldArr);
                    }
                }
            }
        }
    }

    /**
     * 求范围的交集，只有交集才会被保留
     * 例如：1-5 ∩ 2-8 => 2-5
     * @param param
     */
    intersect(param) {
        // 获得等待相减的Range列表
        const newList = this[$param2RnageList](param);
        // 旧的Range列表
        const oldList = this[$rangeList];

        const list = [];

        while (newList.length > 0) {
            const newArr = newList.shift().toArray();
            const arr = [];
            for (let i = oldList.length-1; i >= 0; i--) {
                const oldRange = oldList[i];
                const oldArr = oldRange.toArray();
                newArr.map((v)=>{
                    const index = oldArr.indexOf(v);
                    if(index != -1){
                        arr.push(v);
                    }
                });
            }
            if(arr.length > 0){
                list.push(arr);
            }
        }

        this[$rangeList].length = 0;
        list.map((arr)=>{
            this.add(arr);
        })
    }

    /**
     * 切割
     * 1-5 cut 3 => 1-2,3-5
     * @param {number} value
     */
    cut(value) {
        let param = '';
        // 旧的Range列表
        const oldList = this[$rangeList];
        for (let i = 0; i < oldList.length; i++) {
            const oldRange = oldList[i];
            if(oldRange.has(value)){
                param = `${oldRange.min}-${value-1},${value}-${oldRange.max}`;
                oldList.splice(i,1);
                break;
            }
        }
        if(param.length>0){
            this.add(param);
        }
    }

    /**
     * 将参数转换为 Range 的数组
     * @param {{}} param
     * @returns {Array.<Range>}
     */
    [$param2RnageList](param) {
        let list = [];
        let paramType = typeof param;
        // 参数是字符串类型
        if(paramType === 'string'){
            let paramStr = String(param);
            // 逗号分隔多个Range
            let rangeList = paramStr.split(',');
            for (let i = 0; i < rangeList.length; i++) {
                let rangeStr = rangeList[i];
                // 减号分隔Rnage的范围
                let strArr = rangeStr.split('-');
                let begin = Number(strArr[0]);
                let end = Number(strArr[1]);
                if(strArr.length==1){
                    if(!isNaN(begin)){
                        list.push(new Range(begin));
                    }
                }
                else{
                    if(!isNaN(begin) && !isNaN(end)){
                        list.push(new Range(begin, end-begin+1));
                    }
                }
            }
        }
        // 参数是数字类型
        else if(paramType === 'number'){
            list.push(new Range(param));
        }
        // 参数是数组类型
        else if(param instanceof Array){
            // 从小到大排序
            param.sort((a,b)=>{return a-b});
            // 每个元素四舍五入 转换为整数
            param.map((v,i)=>{param[i] = Math.round(v)});
            let range = null;
            for (let i = 0; i < param.length; i++) {
                let num = Number(param[i]);
                // 排除非number
                if(param[i]===null || isNaN(num)){
                    continue;
                }
                // 创建一个新Range
                if(range === null || range.max+1 != num){
                    range = new Range(num);
                    list.push(range);
                }
                else{
                    range.max = num;
                }
            }
        }
        else if(param instanceof Range){
            list.push(param);
        }
        return list;
    }

    toString() {
        let str = '';
        this[$rangeList].map((v)=>{
           str += v.toString();
        });
        return str;
    }
}


const $begin = Symbol('begin');
const $length = Symbol('length');

class Range {
    /**
     *
     * @param {number} begin
     * @param {number} length
     */
    constructor(begin, length=1) {
        this[$begin] = Math.round(begin);
        this[$length] = Math.round(length)>0?Math.round(length):1;
    }

    /**
     * Range to Array
     * @returns {Array}
     */
    toArray() {
        let arr = [];
        for (let i = this.min; i <= this.max; i++) {
            arr.push(i);
        }
        return arr;
    }

    get begin() {
        return this[$begin];
    }
    set begin(value) {
        this[$begin] = Math.round(value);
    }

    get length() {
        return this[$length];
    }
    set length(value) {
        this[$length] = Math.round(value);
    }

    get min() {
        return this.begin;
    }
    set min(value) {
        let _min = Math.min(this.min, value);
        let _max = Math.max(this.max, value);
        this.begin = _min;
        this.length = _max - _min + 1;
    }

    get max() {
        return this.begin + this.length - 1;
    }
    set max(value) {
        this.min = value;
    }

    /**
     * 判断对象是否包含 range
     * @param range
     * @returns {boolean}
     */
    isContains(range) {
        return this.min <= range.min && this.max >= range.max;
    }

    /**
     * 判断对象是否与 range 相交
     * @param range
     * @returns {boolean}
     */
    isIntersect(range) {
        return (this.min <= range.max && this.min >= range.min)
            || (this.max >= range.min && this.max <= range.max);
    }

    /**
     *
     * @param value
     * @returns {boolean}
     */
    has(value) {
        return value>=this.min && value<=this.max;
    }

    toString() {
        return `[${this.min},${this.max}]`
    }
}


module.exports = {RangeGroup, Range};